// Generated by gencpp from file state_machine/StateOut.msg
// DO NOT EDIT!


#ifndef STATE_MACHINE_MESSAGE_STATEOUT_H
#define STATE_MACHINE_MESSAGE_STATEOUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace state_machine
{
template <class ContainerAllocator>
struct StateOut_
{
  typedef StateOut_<ContainerAllocator> Type;

  StateOut_()
    : header()
    , Diagnostics()
    , PodInfo(0)
    , HMSCheck(0)
    , OperationMode(0)
    , PrevState(0)
    , CurrState(0)  {
    }
  StateOut_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Diagnostics(_alloc)
    , PodInfo(0)
    , HMSCheck(0)
    , OperationMode(0)
    , PrevState(0)
    , CurrState(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Diagnostics_type;
  _Diagnostics_type Diagnostics;

   typedef uint8_t _PodInfo_type;
  _PodInfo_type PodInfo;

   typedef uint8_t _HMSCheck_type;
  _HMSCheck_type HMSCheck;

   typedef uint8_t _OperationMode_type;
  _OperationMode_type OperationMode;

   typedef uint8_t _PrevState_type;
  _PrevState_type PrevState;

   typedef uint8_t _CurrState_type;
  _CurrState_type CurrState;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(State_Idle)
  #undef State_Idle
#endif
#if defined(_WIN32) && defined(State_P2P)
  #undef State_P2P
#endif
#if defined(_WIN32) && defined(State_Identify)
  #undef State_Identify
#endif
#if defined(_WIN32) && defined(State_Approach)
  #undef State_Approach
#endif
#if defined(_WIN32) && defined(State_Verify)
  #undef State_Verify
#endif
#if defined(_WIN32) && defined(State_Retrace)
  #undef State_Retrace
#endif
#if defined(_WIN32) && defined(State_Lock)
  #undef State_Lock
#endif
#if defined(_WIN32) && defined(State_Unlock)
  #undef State_Unlock
#endif
#if defined(_WIN32) && defined(State_EHS)
  #undef State_EHS
#endif
#if defined(_WIN32) && defined(OperationMode_Pickup)
  #undef OperationMode_Pickup
#endif
#if defined(_WIN32) && defined(OperationMode_DropOff)
  #undef OperationMode_DropOff
#endif

  enum {
    State_Idle = 0u,
    State_P2P = 1u,
    State_Identify = 2u,
    State_Approach = 3u,
    State_Verify = 4u,
    State_Retrace = 5u,
    State_Lock = 6u,
    State_Unlock = 7u,
    State_EHS = 8u,
    OperationMode_Pickup = 1u,
    OperationMode_DropOff = 2u,
  };


  typedef boost::shared_ptr< ::state_machine::StateOut_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::state_machine::StateOut_<ContainerAllocator> const> ConstPtr;

}; // struct StateOut_

typedef ::state_machine::StateOut_<std::allocator<void> > StateOut;

typedef boost::shared_ptr< ::state_machine::StateOut > StateOutPtr;
typedef boost::shared_ptr< ::state_machine::StateOut const> StateOutConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::state_machine::StateOut_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::state_machine::StateOut_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::state_machine::StateOut_<ContainerAllocator1> & lhs, const ::state_machine::StateOut_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Diagnostics == rhs.Diagnostics &&
    lhs.PodInfo == rhs.PodInfo &&
    lhs.HMSCheck == rhs.HMSCheck &&
    lhs.OperationMode == rhs.OperationMode &&
    lhs.PrevState == rhs.PrevState &&
    lhs.CurrState == rhs.CurrState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::state_machine::StateOut_<ContainerAllocator1> & lhs, const ::state_machine::StateOut_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace state_machine

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::state_machine::StateOut_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_machine::StateOut_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::state_machine::StateOut_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::state_machine::StateOut_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_machine::StateOut_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_machine::StateOut_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::state_machine::StateOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "709ee385b8a9e470a0649c6afc4d01c8";
  }

  static const char* value(const ::state_machine::StateOut_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x709ee385b8a9e470ULL;
  static const uint64_t static_value2 = 0xa0649c6afc4d01c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::state_machine::StateOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "state_machine/StateOut";
  }

  static const char* value(const ::state_machine::StateOut_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::state_machine::StateOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 State_Idle=0\n"
"uint8 State_P2P=1\n"
"uint8 State_Identify=2\n"
"uint8 State_Approach=3\n"
"uint8 State_Verify=4\n"
"uint8 State_Retrace=5\n"
"uint8 State_Lock=6\n"
"uint8 State_Unlock=7\n"
"uint8 State_EHS= 8\n"
"uint8 OperationMode_Pickup = 1\n"
"uint8 OperationMode_DropOff = 2\n"
"Header header \n"
"string Diagnostics\n"
"uint8 PodInfo\n"
"uint8 HMSCheck\n"
"uint8 OperationMode\n"
"uint8 PrevState\n"
"uint8 CurrState\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::state_machine::StateOut_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::state_machine::StateOut_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Diagnostics);
      stream.next(m.PodInfo);
      stream.next(m.HMSCheck);
      stream.next(m.OperationMode);
      stream.next(m.PrevState);
      stream.next(m.CurrState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StateOut_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::state_machine::StateOut_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::state_machine::StateOut_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Diagnostics: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Diagnostics);
    s << indent << "PodInfo: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PodInfo);
    s << indent << "HMSCheck: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.HMSCheck);
    s << indent << "OperationMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.OperationMode);
    s << indent << "PrevState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PrevState);
    s << indent << "CurrState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CurrState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STATE_MACHINE_MESSAGE_STATEOUT_H

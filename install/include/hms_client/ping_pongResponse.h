// Generated by gencpp from file hms_client/ping_pongResponse.msg
// DO NOT EDIT!


#ifndef HMS_CLIENT_MESSAGE_PING_PONGRESPONSE_H
#define HMS_CLIENT_MESSAGE_PING_PONGRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hms_client/hms_msg.h>

namespace hms_client
{
template <class ContainerAllocator>
struct ping_pongResponse_
{
  typedef ping_pongResponse_<ContainerAllocator> Type;

  ping_pongResponse_()
    : msg()
    , health(0)
    , error_code(0)  {
    }
  ping_pongResponse_(const ContainerAllocator& _alloc)
    : msg(_alloc)
    , health(0)
    , error_code(0)  {
  (void)_alloc;
    }



   typedef  ::hms_client::hms_msg_<ContainerAllocator>  _msg_type;
  _msg_type msg;

   typedef int64_t _health_type;
  _health_type health;

   typedef int64_t _error_code_type;
  _error_code_type error_code;





  typedef boost::shared_ptr< ::hms_client::ping_pongResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hms_client::ping_pongResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ping_pongResponse_

typedef ::hms_client::ping_pongResponse_<std::allocator<void> > ping_pongResponse;

typedef boost::shared_ptr< ::hms_client::ping_pongResponse > ping_pongResponsePtr;
typedef boost::shared_ptr< ::hms_client::ping_pongResponse const> ping_pongResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hms_client::ping_pongResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hms_client::ping_pongResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hms_client::ping_pongResponse_<ContainerAllocator1> & lhs, const ::hms_client::ping_pongResponse_<ContainerAllocator2> & rhs)
{
  return lhs.msg == rhs.msg &&
    lhs.health == rhs.health &&
    lhs.error_code == rhs.error_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hms_client::ping_pongResponse_<ContainerAllocator1> & lhs, const ::hms_client::ping_pongResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hms_client

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hms_client::ping_pongResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hms_client::ping_pongResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hms_client::ping_pongResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hms_client::ping_pongResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hms_client::ping_pongResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hms_client::ping_pongResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hms_client::ping_pongResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7b86f9eb0923993e40e04c44b2dc528";
  }

  static const char* value(const ::hms_client::ping_pongResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7b86f9eb0923993ULL;
  static const uint64_t static_value2 = 0xe40e04c44b2dc528ULL;
};

template<class ContainerAllocator>
struct DataType< ::hms_client::ping_pongResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hms_client/ping_pongResponse";
  }

  static const char* value(const ::hms_client::ping_pongResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hms_client::ping_pongResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#response \n"
"hms_msg msg\n"
"int64 health\n"
"int64 error_code\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: hms_client/hms_msg\n"
"Header header\n"
"string temp1\n"
"float32 temp2\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::hms_client::ping_pongResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hms_client::ping_pongResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msg);
      stream.next(m.health);
      stream.next(m.error_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ping_pongResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hms_client::ping_pongResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hms_client::ping_pongResponse_<ContainerAllocator>& v)
  {
    s << indent << "msg: ";
    s << std::endl;
    Printer< ::hms_client::hms_msg_<ContainerAllocator> >::stream(s, indent + "  ", v.msg);
    s << indent << "health: ";
    Printer<int64_t>::stream(s, indent + "  ", v.health);
    s << indent << "error_code: ";
    Printer<int64_t>::stream(s, indent + "  ", v.error_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HMS_CLIENT_MESSAGE_PING_PONGRESPONSE_H

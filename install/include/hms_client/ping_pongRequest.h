// Generated by gencpp from file hms_client/ping_pongRequest.msg
// DO NOT EDIT!


#ifndef HMS_CLIENT_MESSAGE_PING_PONGREQUEST_H
#define HMS_CLIENT_MESSAGE_PING_PONGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hms_client
{
template <class ContainerAllocator>
struct ping_pongRequest_
{
  typedef ping_pongRequest_<ContainerAllocator> Type;

  ping_pongRequest_()
    : node_name()  {
    }
  ping_pongRequest_(const ContainerAllocator& _alloc)
    : node_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _node_name_type;
  _node_name_type node_name;





  typedef boost::shared_ptr< ::hms_client::ping_pongRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hms_client::ping_pongRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ping_pongRequest_

typedef ::hms_client::ping_pongRequest_<std::allocator<void> > ping_pongRequest;

typedef boost::shared_ptr< ::hms_client::ping_pongRequest > ping_pongRequestPtr;
typedef boost::shared_ptr< ::hms_client::ping_pongRequest const> ping_pongRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hms_client::ping_pongRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hms_client::ping_pongRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hms_client::ping_pongRequest_<ContainerAllocator1> & lhs, const ::hms_client::ping_pongRequest_<ContainerAllocator2> & rhs)
{
  return lhs.node_name == rhs.node_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hms_client::ping_pongRequest_<ContainerAllocator1> & lhs, const ::hms_client::ping_pongRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hms_client

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hms_client::ping_pongRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hms_client::ping_pongRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hms_client::ping_pongRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hms_client::ping_pongRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hms_client::ping_pongRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hms_client::ping_pongRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hms_client::ping_pongRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "46dbb9fd4d6116d8efbaf5fa2a959582";
  }

  static const char* value(const ::hms_client::ping_pongRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x46dbb9fd4d6116d8ULL;
  static const uint64_t static_value2 = 0xefbaf5fa2a959582ULL;
};

template<class ContainerAllocator>
struct DataType< ::hms_client::ping_pongRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hms_client/ping_pongRequest";
  }

  static const char* value(const ::hms_client::ping_pongRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hms_client::ping_pongRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#request \n"
"string node_name\n"
;
  }

  static const char* value(const ::hms_client::ping_pongRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hms_client::ping_pongRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ping_pongRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hms_client::ping_pongRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hms_client::ping_pongRequest_<ContainerAllocator>& v)
  {
    s << indent << "node_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.node_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HMS_CLIENT_MESSAGE_PING_PONGREQUEST_H

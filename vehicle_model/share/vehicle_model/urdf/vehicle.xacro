<?xml version="1.0"?>
<robot name="autoware_gazebo" xmlns:xacro="http://ros.org/wiki/xacro">
  <xacro:include filename="$(find vehicle_model)/urdf/body.xacro" />
  <xacro:include filename="$(find vehicle_model)/urdf/wheel.xacro" />
  <xacro:include filename="$(find vehicle_model)/urdf/steering.xacro" />
  <xacro:include filename="$(find velodyne_description)/urdf/HDL-32E.urdf.xacro"/>
  <xacro:include filename="$(find velodyne_description)/urdf/VLP-16.urdf.xacro"/>
  <xacro:include filename="$(find gazebo_camera_description)/urdf/monocular_camera.xacro"/>
  <xacro:include filename="$(find gazebo_imu_description)/urdf/imu.xacro"/>

  <xacro:arg name="gpu" default="false"/>

  <xacro:property name="pi" value="3.1415926835897931"/>

  <link name="base_link"/>

  <!-- ================ vehicle ================ -->
  <!-- load parameter -->
	<xacro:property name="vehicle_info" value="${load_yaml('$(find vehicle_model)/config/vehicle_info.yaml')}"/>
  <!-- set parameter -->
	<xacro:property name="wheel_radius" value="${vehicle_info['wheel_radius']}"/>
  <xacro:property name="wheel_width" value="${vehicle_info['wheel_width']}"/>
  <xacro:property name="wheel_base" value="${vehicle_info['wheel_base']}"/>
  <xacro:property name="wheel_tread" value="${vehicle_info['wheel_tread']}"/>
  <xacro:property name="vehicle_mass" value="${vehicle_info['vehicle_mass']}"/>
  <xacro:property name="vehicle_length" value="${vehicle_info['vehicle_length']}"/>
  <xacro:property name="vehicle_width" value="${vehicle_info['vehicle_width']}"/>
  <xacro:property name="vehicle_height" value="${vehicle_info['vehicle_height']}"/>
  <xacro:property name="vehicle_mass_height" value="0.5"/>

  <!-- body-->
  <xacro:body_macro suffix="base_body"
                    parent="base_link"
                    wheel_radius="${wheel_radius}"
                    wheel_base="${wheel_base}"
                    vehicle_mass="${vehicle_mass}"
                    vehicle_mass_height="${vehicle_mass_height}"
                    vehicle_length="${vehicle_length}"
                    vehicle_width="${vehicle_width}"
                    vehicle_height="${vehicle_height}"/>
  <!-- steering-->
  <xacro:steering_link_macro suffix="steering_front" parent="base_body_link" x="${wheel_base}" y="0"/>
  <xacro:steering_macro suffix="steering_right_front" parent="steering_front_link" x="0" y="${-1*wheel_tread/2}" yaw="0" length="${wheel_width}"/>
  <xacro:steering_macro suffix="steering_left_front" parent="steering_front_link" x="0" y="${wheel_tread/2}" yaw="0" length="${wheel_width}"/>
  <!-- wheel -->
  <xacro:wheel_macro suffix="wheel_right_front" parent="steering_right_front_link" x="0" y="0" yaw="${pi}" radius="${wheel_radius}" width="${wheel_width}"/>
  <xacro:wheel_macro suffix="wheel_left_front" parent="steering_left_front_link" x="0" y="0" yaw="0" radius="${wheel_radius}" width="${wheel_width}"/>
  <xacro:wheel_macro suffix="wheel_right_rear" parent="base_body_link" x="0" y="${-1*wheel_tread/2}" yaw="${pi}" radius="${wheel_radius}" width="${wheel_width}"/>
  <xacro:wheel_macro suffix="wheel_left_rear" parent="base_body_link" x="0" y="${wheel_tread/2}" yaw="0" radius="${wheel_radius}" width="${wheel_width}"/>
  <!-- actuator -->
 	<xacro:include filename="$(find vehicle_model)/urdf/actuator.xacro"/>
  <!-- gazebo -->
 	<xacro:include filename="$(find vehicle_model)/urdf/vehicle.gazebo"/>

  <!-- ================ sensor ================ -->
	<xacro:property name="calibration" value="${load_yaml('$(find vehicle_model)/config/calibration.yaml')}"/>
  <HDL-32E parent="base_link" name="velodyne" topic="/points_raw" hz="10" samples="220" gpu="$(arg gpu)">
    <origin xyz="${wheel_base/2 + calibration['base_link2velodyne']['x']} ${calibration['base_link2velodyne']['y']} ${calibration['base_link2velodyne']['z']}" 
            rpy="${calibration['base_link2velodyne']['roll']} ${calibration['base_link2velodyne']['pitch']} ${calibration['base_link2velodyne']['yaw']}" />
  </HDL-32E>

   <joint name="base_link_to_lift" type="prismatic">
    <parent link="base_link"/>
    <child link="lift_link"/>
    <axis xyz="0 0 1"/>
    <limit lower="0" upper="3" effort="1000" velocity="0.2"/>
  </joint>


<link name="lift_link">
    <visual>
          <origin xyz="${wheel_base/2 + calibration['base_link2lift']['x']} ${calibration['base_link2lift']['y']} ${calibration['base_link2lift']['z']}" 
            rpy="${calibration['base_link2lift']['roll']} ${calibration['base_link2lift']['pitch']} ${calibration['base_link2lift']['yaw']}" />
      <geometry>
        <mesh filename="package://vehicle_model/meshes/lift_f.dae"/>
      </geometry>
      <material name="chassis_mat"/>
    </visual>
    <!-- CAN VBE MULTIPLE COLLISIONS -->
    <collision>
          <origin xyz="${wheel_base/2 + calibration['base_link2lift']['x']} ${calibration['base_link2lift']['y']} ${calibration['base_link2lift']['z']}" 
            rpy="${calibration['base_link2lift']['roll']} ${calibration['base_link2lift']['pitch']} ${calibration['base_link2lift']['yaw']}" />
      <geometry>
        <mesh filename="package://vehicle_model/meshes/lift_f_col.dae"/>
      </geometry>
    </collision>
    <inertial>
        <origin xyz="${wheel_base/2 + calibration['base_link2lift']['x']} ${calibration['base_link2lift']['y']} ${calibration['base_link2lift']['z']}" 
            rpy="${calibration['base_link2lift']['roll']} ${calibration['base_link2lift']['pitch']} ${calibration['base_link2lift']['yaw']}" />
        <mass value="1"/>
        <inertia
          ixx="1.0" ixy="0.0" ixz="0.0"
          iyy="1.0" iyz="0.0"
          izz="1.0"/>
    </inertial>
  </link>
  <gazebo reference="lift_link">
    <material>Gazebo/Grey</material>
    <selfCollide>false</selfCollide>
  </gazebo>

  <xacro:monocular_camera_macro suffix="camera" parent="base_link" namespace="" 
                                x="${wheel_base/2 + calibration['base_link2camera']['x']}"
                                y="${calibration['base_link2camera']['y']}"
                                z="${calibration['base_link2camera']['z']}"
                                roll="${calibration['base_link2camera']['roll']}"
                                pitch="${calibration['base_link2camera']['pitch']}"
                                yaw="${calibration['base_link2camera']['yaw']}"
                                fps="30" width="800" height="400" fov="1.3"/>
  <xacro:imu_macro suffix="imu" parent="base_link" namespace=""
                   x="${ wheel_base/2 + calibration['base_link2imu']['x']}"
                   y="${calibration['base_link2imu']['y']}"
                   z="${calibration['base_link2imu']['z']}"
                   roll="${calibration['base_link2imu']['roll']}"
                   pitch="${calibration['base_link2imu']['pitch']}"
                   yaw="${calibration['base_link2imu']['yaw']}"
                   fps="100" />


<joint name="hokuyo_joint" type="fixed">
    <origin xyz="${wheel_base/2 + calibration['base_link2hokuyu']['x']} ${calibration['base_link2hokuyu']['y']} ${calibration['base_link2hokuyu']['z']}" 
            rpy="${calibration['base_link2hokuyu']['roll']} ${calibration['base_link2hokuyu']['pitch']} ${calibration['base_link2hokuyu']['yaw']}" />
    <parent link="base_link" />
    <child link="hokuyo" />
  </joint>

  <link name="hokuyo">
    <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://vehicle_model/meshes/hokuyo.dae"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="0.000001" />
      <origin xyz="0 0 0" />
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0"
               iyy="0.0001" iyz="0.0"
               izz="0.0001" />
    </inertial>
  </link>

  <!-- NON GPU -->
<!-- hokuyo -->
  <gazebo reference="hokuyo">
    <sensor type="ray" name="head_hokuyo_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>560</samples>
            <resolution>1</resolution>
            <min_angle>-1.22173</min_angle>
            <max_angle>1.22173</max_angle>
          </horizontal> 
        </scan>
        <range>
          <min>0.10</min>
          <max>10.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>/scan</topicName>
        <frameName>/hokuyo</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo>
    <plugin name="p3d_base_controller" filename="libgazebo_ros_p3d.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>50.0</updateRate>
      <bodyName>base_link</bodyName>
      <topicName>ground_truth/state</topicName>
      <gaussianNoise>0.01</gaussianNoise>
      <frameName>map</frameName>
      <xyzOffsets>0 0 0</xyzOffsets>
      <rpyOffsets>0 0 0</rpyOffsets>
    </plugin>
  </gazebo>

  <xacro:include filename="$(find velodyne_description)/urdf/VLP-16.urdf.xacro"/>
  <VLP-16 parent = "base_link" name="/velodyne16" topic="/velodyne_points" hz="5" samples="440/">
      <origin xyz="${wheel_base/2 + calibration['base_link2velodyne16']['x']} ${calibration['base_link2velodyne16']['y']} ${calibration['base_link2velodyne16']['z']}" 
              rpy="${calibration['base_link2velodyne16']['roll']} ${calibration['base_link2velodyne16']['pitch']} ${calibration['base_link2velodyne16']['yaw']}" />
  </VLP-16>

 <transmission name="lift_transmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="base_link_to_lift">
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>  
    <actuator name="lift_motor">
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>


</robot>